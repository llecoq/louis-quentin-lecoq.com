*/----------------------------ANIMATIONS */
[] Animation en descendant page (les sections arrivent de maniere smooth ?)
[x] Animation en cliquant sur section pour aller a la section de maniere smooth

*/-------------------------------CONTENT */
[] Section Home: Hello world ! I'm Louis-Quentin Lecoq
[] Section About 
[] Section Skills (avec animation langages connus)
[] Section Projects ?
[] Section Contact (si assez de temps, peut etre faire une petite DB pour travailler le backend avec rust)
[] Footer
[] Ajouter une section "autre"? Photos / cuisine / musique

*/--------------------------------DESIGN */
[] Responsive (Breakpoints etc.)

*/---------------------------------AUTRE */
[] Travailler CI avec gitlab (a partir de janvier pour mise en prod)
[] License ?!
[] Meta? Inspi site web + inspection code pour mieux comprendre bonnes pratiques etc.
[] clean HTML
[] refacto function => class

*/---------------------------------MEMORY LEAKS */
[] Remove event listener
[] Check Animation for leaks

*/---------------------------------PARTICLES ANIM */
[x] Restrain impulses from drawing if particles are too far away (delete impulse) 
[x] Stop impulses anim if mouse outside of canvas
[x] Stop anim if canvas outside of field of view
[x] Sync anim with FPS
[x] Handling Window Resize Event (scaling canvas)
[x] Refactoring for Better Structure (CanvasManager = nop / ParticleManager / AnimationController)
[x] Make sure eventlisteners are cleared when not needed anymore
[] Switch anim JS / Rust => faire en sorte de passer toutes les Particles + Impulses et attendre que l'anim soit prete de l'autre cote si besoin pour la lancer + smooth
[] toggle to change number of particles ?

*/---------------------------------RUST WASM */
*** FIRST STEP ***
[x] Instanciate all the particles in a shared buffer from Rust and refacto JS side to read from it
[] update Particles position with Rust, access the data from the shared buffer with JS to print it on canvas

if this is OK, next step will be to compute the neighbors, connections between them and handle the Impulses
if NOT, then it might be interesting to consider using web-sys and sledgehammmer for the DOM calls on the canvas (implying that all the canvas calls will be made from Rust)

